<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DatabaseWrapper</name>
    </assembly>
    <members>
        <member name="T:DatabaseWrapper.Column">
            <summary>
            Database table column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Column.Name">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Column.PrimaryKey">
            <summary>
            Whether or not the column is the table's primary key.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Column.Type">
            <summary>
            The data type of the column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Column.MaxLength">
            <summary>
            The maximum character length of the data contained within the column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Column.Precision">
            <summary>
            For precision, i.e. number of places after the decimal.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Column.Nullable">
            <summary>
            Whether or not the column can contain NULL.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Column.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Column.#ctor(System.String,System.Boolean,DatabaseWrapper.DataType,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="primaryKey">Indicate if this column is the primary key.</param>
            <param name="dt">DataType for the column.</param>
            <param name="maxLen">Max length for the column.</param>
            <param name="precision">Precision for the column.</param>
            <param name="nullable">Indicate if this column is nullable.</param>
        </member>
        <member name="T:DatabaseWrapper.ConcurrentList`1">
            <summary>
            A thread-safe list with support for:
            1) negative indexes (read from end).  "myList[-1]" gets the last value
            2) modification while enumerating: enumerates a copy of the collection.
            Taken from StackOverflow http://stackoverflow.com/questions/9995266/how-to-create-a-thread-safe-generic-list
            </summary> 
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:DatabaseWrapper.ConcurrentList`1.Item(System.Int32)">
            <summary>
            support for negative indexes (read from end).  "myList[-1]" gets the last value
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:DatabaseWrapper.DatabaseClient">
            <summary>
            Database client for MSSQL, Mysql, and PostgreSQL.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.DatabaseClient.Type">
            <summary>
            The type of database.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.DatabaseClient.ConnectionString">
            <summary>
            The connection string used to connect to the database server.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DatabaseClient.DebugRawQuery">
            <summary>
            Enable or disable console logging of raw queries generated by the library.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DatabaseClient.DebugResultRowCount">
            <summary>
            Enable or disable console logging of returned row counts for successful queries run by the library.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.#ctor(DatabaseWrapper.DbTypes,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Create an instance of the database client.
            </summary>
            <param name="dbType">The type of database.</param>
            <param name="serverIp">The IP address or hostname of the database server.</param>
            <param name="serverPort">The TCP port of the database server.</param>
            <param name="username">The username to use when authenticating with the database server.</param>
            <param name="password">The password to use when authenticating with the database server.</param>
            <param name="instance">The instance on the database server (for use with Microsoft SQL Server).</param>
            <param name="database">The name of the database with which to connect.</param>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Create an instance of the database client.
            </summary>
            <param name="dbType">The type of database.</param>
            <param name="serverIp">The IP address or hostname of the database server.</param>
            <param name="serverPort">The TCP port of the database server.</param>
            <param name="username">The username to use when authenticating with the database server.</param>
            <param name="password">The password to use when authenticating with the database server.</param>
            <param name="instance">The instance on the database server (for use with Microsoft SQL Server).</param>
            <param name="database">The name of the database with which to connect.</param>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.Dispose">
            <summary>
            Tear down the client and dispose of resources.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.ListTables">
            <summary>
            List all tables in the database.
            </summary>
            <returns>List of strings, each being a table name.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.TableExists(System.String)">
            <summary>
            Check if a table exists in the database.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.DescribeTable(System.String)">
            <summary>
            Show the columns and column metadata from a specific table.
            </summary>
            <param name="tableName">The table to view.</param>
            <returns>A list of column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.DescribeDatabase">
            <summary>
            Describe each of the tables in the database.
            </summary>
            <returns>Dictionary.  Key is table name, value is List of Column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.CreateTable(System.String,System.Collections.Generic.List{DatabaseWrapper.Column})">
            <summary>
            Create a table with a specified name.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="columns">Columns.</param>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.DropTable(System.String)">
            <summary>
            Drop the specified table.  
            </summary>
            <param name="tableName">The table to drop.</param>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.GetPrimaryKeyColumn(System.String)">
            <summary>
            Retrieve the name of the primary key column from a specific table.
            </summary>
            <param name="tableName">The table of which you want the primary key.</param>
            <returns>A string containing the column name.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.GetColumnNames(System.String)">
            <summary>
            Retrieve a list of the names of columns from within a specific table.
            </summary>
            <param name="tableName">The table of which ou want to retrieve the list of columns.</param>
            <returns>A list of strings containing the column names.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.GetUniqueObjectById(System.String,System.String,System.Object)">
            <summary>
            Returns a DataTable containing at most one row with data from the specified table where the specified column contains the specified value.  Should only be used on key or unique fields.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="columnName">The column containing key or unique fields where a match is desired.</param>
            <param name="value">The value to match in the key or unique field column.  This should be an object that can be cast to a string value.</param>
            <returns>A DataTable containing at most one row.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.Select(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},DatabaseWrapper.Expression,System.String)">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval; used for pagination in conjunction with maxResults and orderByClause.  orderByClause example: ORDER BY created DESC.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <param name="orderByClause">Specify an ORDER BY clause if desired.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execute an INSERT query.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairs">The key-value pairs for the row you wish to INSERT.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},DatabaseWrapper.Expression)">
            <summary>
            Execute an UPDATE query.
            </summary>
            <param name="tableName">The table in which you wish to UPDATE.</param>
            <param name="keyValuePairs">The key-value pairs for the data you wish to UPDATE.</param>
            <param name="filter">The expression containing the UPDATE filter (i.e. WHERE clause data).</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.Delete(System.String,DatabaseWrapper.Expression)">
            <summary>
            Execute a DELETE query.
            </summary>
            <param name="tableName">The table in which you wish to DELETE.</param>
            <param name="filter">The expression containing the DELETE filter (i.e. WHERE clause data).</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.Truncate(System.String)">
            <summary>
            Empties a table completely.
            </summary>
            <param name="tableName">The table you wish to TRUNCATE.</param>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.Query(System.String)">
            <summary>
            Execute a query.
            </summary>
            <param name="query">Database query defined outside of the database client.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.Timestamp(System.DateTime)">
            <summary>
            Create a string timestamp from the given DateTime for the database of the instance type.
            </summary>
            <param name="ts">DateTime.</param>
            <returns>A string with timestamp formatted for the database of the instance type.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.SanitizeString(System.String)">
            <summary>
            Sanitize an input string.
            </summary>
            <param name="val">The value to sanitize.</param>
            <returns>A sanitized string.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.DataTypeFromString(System.String)">
            <summary>
            Retrieve a DataType based on a supplied string.
            </summary>
            <param name="s">String.</param>
            <returns>DataType.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.Dispose(System.Boolean)">
            <summary>
            Dispose of the object.
            </summary>
            <param name="disposing">Disposing of resources.</param>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.DbTimestamp(DatabaseWrapper.DbTypes,System.DateTime)">
            <summary>
            Convert a DateTime to a string formatted for the specified database type.
            </summary>
            <param name="dbType">The type of database.</param>
            <param name="ts">The timestamp.</param>
            <returns>A string formatted for use with the specified database.</returns>
        </member>
        <member name="M:DatabaseWrapper.DatabaseClient.DbTimestamp(System.String,System.DateTime)">
            <summary>
            Convert a DateTime to a string formatted for the specified database type.
            </summary>
            <param name="dbType">The type of database.</param>
            <param name="ts">The timestamp.</param>
            <returns>A string formatted for use with the specified database.</returns>
        </member>
        <member name="T:DatabaseWrapper.DataType">
            <summary>
            Type of data contained in the column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DataType.Varchar">
            <summary>
            Variable-length character.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DataType.Nvarchar">
            <summary>
            Variable-length unicode character.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DataType.Int">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DataType.Long">
            <summary>
            Long
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DataType.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DataType.DateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:DatabaseWrapper.DbTypes">
            <summary>
            Enumeration containing the supported database types.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DbTypes.MsSql">
            <summary>
            Microsoft SQL Server
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DbTypes.MySql">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="F:DatabaseWrapper.DbTypes.PgSql">
            <summary>
            PostgreSQL
            </summary>
        </member>
        <member name="T:DatabaseWrapper.Operators">
            <summary>
            Enumeration containing the supported WHERE clause operators.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.And">
            <summary>
            Boolean AND
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.Or">
            <summary>
            Boolean OR
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.Equals">
            <summary>
            Values are equal to one another
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.NotEquals">
            <summary>
            Values are not equal to one another
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.In">
            <summary>
            Value is contained within a list
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.NotIn">
            <summary>
            Value is not contained within a list
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.Contains">
            <summary>
            Value contains the specified value
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.ContainsNot">
            <summary>
            Value does not contain the specified value
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.StartsWith">
            <summary>
            Value starts with the specified value
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.EndsWith">
            <summary>
            Value ends with the specified value
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.GreaterThan">
            <summary>
            Value is greater than the specified value
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.GreaterThanOrEqualTo">
            <summary>
            Value is greater than or equal to the specified value
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.LessThan">
            <summary>
            Value is less than the specified value
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.LessThanOrEqualTo">
            <summary>
            Value is less than or equal to the specified value
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.IsNull">
            <summary>
            Value is null
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Operators.IsNotNull">
            <summary>
            Value is not null
            </summary>
        </member>
        <member name="T:DatabaseWrapper.Expression">
            <summary>
            Boolean expression.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Expression.#ctor">
            <summary>
            A structure in the form of term-operator-term that defines a boolean operation within a WHERE clause.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Expression.#ctor(System.Object,DatabaseWrapper.Operators,System.Object)">
            <summary>
            A structure in the form of term-operator-term that defines a boolean operation within a WHERE clause.
            </summary>
            <param name="left">The left term of the expression; can either be a string term or a nested Expression.</param>
            <param name="oper">The operator.</param>
            <param name="right">The right term of the expression; can either be an object for comparison or a nested Expression.</param>
        </member>
        <member name="F:DatabaseWrapper.Expression.LeftTerm">
            <summary>
            The left term of the expression; can either be a string term or a nested Expression.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Expression.Operator">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Expression.RightTerm">
            <summary>
            The right term of the expression; can either be an object for comparison or a nested Expression.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Expression.ToWhereClause(System.String)">
            <summary>
            Converts an Expression to a string that is compatible for use in a WHERE clause.
            </summary>
            <param name="dbType">The database type.</param>
            <returns>String containing human-readable version of the Expression.</returns>
        </member>
        <member name="M:DatabaseWrapper.Expression.ToWhereClause(DatabaseWrapper.DbTypes)">
            <summary>
            Converts an Expression to a string that is compatible for use in a WHERE clause.
            </summary>
            <param name="dbType">The database type.</param>
            <returns>String containing human-readable version of the Expression.</returns>
        </member>
        <member name="M:DatabaseWrapper.Expression.ToString">
            <summary>
            Display Expression in a human-readable string.
            </summary>
            <returns>String containing human-readable version of the Expression.</returns>
        </member>
        <member name="M:DatabaseWrapper.Expression.PrependAnd(System.Object,DatabaseWrapper.Operators,System.Object)">
            <summary>
            Prepends a new Expression using the supplied left term, operator, and right term using an AND clause.
            </summary>
            <param name="left">The left term of the expression; can either be a string term or a nested Expression.</param>
            <param name="oper">The operator.</param>
            <param name="right">The right term of the expression; can either be an object for comparison or a nested Expression.</param>
        </member>
        <member name="M:DatabaseWrapper.Expression.PrependAnd(DatabaseWrapper.Expression)">
            <summary>
            Prepends the Expression with the supplied Expression using an AND clause.
            </summary>
            <param name="prepend">The Expression to prepend.</param> 
        </member>
        <member name="M:DatabaseWrapper.Expression.PrependOr(System.Object,DatabaseWrapper.Operators,System.Object)">
            <summary>
            Prepends a new Expression using the supplied left term, operator, and right term using an OR clause.
            </summary>
            <param name="left">The left term of the expression; can either be a string term or a nested Expression.</param>
            <param name="oper">The operator.</param>
            <param name="right">The right term of the expression; can either be an object for comparison or a nested Expression.</param>
        </member>
        <member name="M:DatabaseWrapper.Expression.PrependOr(DatabaseWrapper.Expression)">
            <summary>
            Prepends the Expression with the supplied Expression using an OR clause.
            </summary>
            <param name="prepend">The Expression to prepend.</param> 
        </member>
        <member name="M:DatabaseWrapper.Expression.PrependAndClause(DatabaseWrapper.Expression,DatabaseWrapper.Expression)">
            <summary>
            Prepends the Expression in prepend to the Expression original using an AND clause.
            </summary>
            <param name="prepend">The Expression to prepend.</param>
            <param name="original">The original Expression.</param>
            <returns>A new Expression.</returns>
        </member>
        <member name="M:DatabaseWrapper.Expression.PrependOrClause(DatabaseWrapper.Expression,DatabaseWrapper.Expression)">
            <summary>
            Prepends the Expression in prepend to the Expression original using an OR clause.
            </summary>
            <param name="prepend">The Expression to prepend.</param>
            <param name="original">The original Expression.</param>
            <returns>A new Expression.</returns>
        </member>
        <member name="M:DatabaseWrapper.Expression.ListToNestedAndExpression(System.Collections.Generic.List{DatabaseWrapper.Expression})">
            <summary>
            Convert a List of Expression objects to a nested Expression containing AND between each Expression in the list. 
            </summary>
            <param name="exprList">List of Expression objects.</param>
            <returns>A nested Expression.</returns>
        </member>
        <member name="M:DatabaseWrapper.Expression.ListToNestedOrExpression(System.Collections.Generic.List{DatabaseWrapper.Expression})">
            <summary>
            Convert a List of Expression objects to a nested Expression containing OR between each Expression in the list. 
            </summary>
            <param name="exprList">List of Expression objects.</param>
            <returns>A nested Expression.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.IsList(System.Object)">
            <summary>
            Determines if an object is a list.
            </summary>
            <param name="o">An object.</param>
            <returns>Boolean indicating if the object is a list.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.ObjectToList(System.Object)">
            <summary>
            Converts an object to a List object.
            </summary>
            <param name="o">An object.</param>
            <returns>A List object.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.DataTableIsNullOrEmpty(System.Data.DataTable)">
            <summary>
            Determines if a DataTable is null or empty.
            </summary>
            <param name="t">A DataTable.</param>
            <returns>Boolean indicating if the DataTable is null or empty.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.DataTableToObject``1(System.Data.DataTable)">
            <summary>
            Converts a DataTable to an object of a given type.
            </summary>
            <typeparam name="T">The type of object to which the DataTable should be converted.</typeparam>
            <param name="t">A DataTable.</param>
            <returns>An object of type T containing values from the DataTable.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.DataRowToObject``1(System.Data.DataRow)">
            <summary>
            Convert a DataRow to an object of type T.
            </summary>
            <typeparam name="T">The type of object to which the DataRow should be converted.</typeparam>
            <param name="r">A DataRow.</param>
            <returns>An object of type T containing values from the DataRow.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.DataTableToListDynamic(System.Data.DataTable)">
            <summary>
            Converts a DataTable to a List of dynamic objects.
            </summary>
            <param name="dt">DataTable.</param>
            <returns>A List of dynamic objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.DataTableToDynamic(System.Data.DataTable)">
            <summary>
            Converts a DataTable to a dynamic, assuming the DataTable has a single row.
            </summary>
            <param name="dt">DataTable.</param>
            <returns>A dynamic object.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.DataTableToListDictionary(System.Data.DataTable)">
            <summary>
            Converts a DataTable to a List of Dictionary objects with key of type string and value of type object.
            </summary>
            <param name="dt">DataTable.</param>
            <returns>List of Dictionary objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.DataTableToDictionary(System.Data.DataTable)">
            <summary>
            Converts a DataTable to a Dictionary with key of type string and value of type object, assuming the DataTable has a single row.
            </summary>
            <param name="dt">DataTable.</param>
            <returns>A Dictionary object.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.DeserializeJson``1(System.String)">
            <summary>
            Deserialize a JSON string to an object of type T.
            </summary>
            <typeparam name="T">The type of object to which the JSON should be deserialized.</typeparam>
            <param name="json">The JSON string.</param>
            <returns>An object of type T built using data from the JSON string.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.DeserializeJson``1(System.Byte[])">
            <summary>
            Deserialize a byte array containing JSON to an object of type T.
            </summary>
            <typeparam name="T">The type of object to which the JSON should be deserialized.</typeparam>
            <param name="bytes">The byte array containing JSON data.</param>
            <returns>An object of type T built using data from the JSON byte data.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.SerializeJson(System.Object,System.Boolean)">
            <summary>
            Serialize an object to a JSON string.
            </summary>
            <param name="obj">An object.</param>
            <param name="pretty">Enable pretty printing.</param>
            <returns>A string containing JSON built from the supplied object.</returns>
        </member>
        <member name="M:DatabaseWrapper.Helper.IsExtendedCharacters(System.String)">
            <summary>
            Check to see if extended characters are in use in a string.
            </summary>
            <param name="data">The string to evaluate.</param>
            <returns>A Boolean indicating whether or not extended characters were detected.</returns>
        </member>
    </members>
</doc>
